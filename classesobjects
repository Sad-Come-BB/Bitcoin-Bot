import time 
import datetime

@dataclass
class Period:
    timestamp: int = None
    open: float = None
    high: float = None
    low: float = None
    close: float = None
    mid: float = None
    avg: float = None


# NOT how you should do it
class Patterncheck:
  def _init_(slope, current):
    slope.currnet = current

  f = open("Binance_BTCUSDT_1h.csv")
  data = f.readlines()[2:5]
  f.close()
  up = 0
  down = 0
  
  for line in reversed(data):
    segments = line.split(",")
    period = Period()
    period.open = float(segments[3])
    period.close = float(segments[6])
    slope = (period.open-period.close)
    
    #read the next line, fuck you should know how to do this 
    segments = line.split(",")
    period = Period()
    period.newclose = float(segments[6])
    if (period.close-0.05 < current < period.close+0.05) && current < (period.close-period.newclose):
        down++
    if (period.close-0.05 < current < period.close+0.05) && current > (period.close-period.newclose):
        up++

  if up == down:
    return ("DOWN")
  elif up > down:
    return ("UP")
  elif down > up:
    return ("DOWN")


@endpoint.update_handler
def on_update(coin, price):
  if (coin == trading.BTC):
    print (coin,price)
    old = price
    time.sleep(300)
    new ==price
    print (old)
         
    newslope = (new-old)/(1/6)
    
  #vote = init(newslope)
  vote = Patterncheck(newslope)
  if vote == "UP":
    up()
  if vote == "DOWN":
    down()
  time.sleep(300)

first_price_time = time.time()
first_price = None

@sdffdfsdf
def on_update(coin, price):
  if it is bitcoin:
    if first_price == None:
      first_price = price

    current_time = time.time()
    dt = current_time - first_price_time
    if dt > 300:
      first_price_time = current_time
      change_in_price = price - first_price
      percentage = change_in_price / first_price 
